#summary Changing Crawl behavior

=Altering Crawl behavior=

Abot was designed to be as pluggable as possible. This allows you to easily alter the way it works by default. There are several ways to alter the behavior.

===By Configuration===
The easiest way to change Abot's behavior for common features is to change the config values that control them. See the QuickStart page for examples on the different ways Abot can be configured.


===Altering Crawl Decisions Using ICrawlDecisionMaker===

Abot will call it's ICrawlDecisionMaker impl to determine whether it should crawl a page, crawl a page's links or download the page's raw content.

[https://code.google.com/p/abot/source/browse/branches/1.1/Abot/Core/CrawlDecisionMaker.cs CrawlDecisionMaker.cs] is the default ICrawlDecisionMaker used by Abot. This class takes care of common checks like making sure the config value MaxPagesToCrawl has not been exceeded and whether it should crawl the link if it is external.  

{{{
public interface ICrawlDecisionMaker
{
	/// <summary>
	/// Decides whether the page should be crawled
	/// </summary>
	CrawlDecision ShouldCrawlPage(PageToCrawl pageToCrawl, CrawlContext crawlContext);

	/// <summary>
	/// Decides whether the page's links should be crawled
	/// </summary>
	CrawlDecision ShouldCrawlPageLinks(CrawledPage crawledPage, CrawlContext crawlContext);

	/// <summary>
	/// Decides whether the page's content should be downloaded
	/// </summary>
	CrawlDecision ShouldDownloadPageContent(CrawledPage crawledPage, CrawlContext crawlContext);
}
}}}


===Altering Crawl Decisions Using Delegates===
aaaaaaaa


===Plugging In Custom Implementations===
The PoliteWebCrawler constructor can be used to plug in your own implementations of key interfaces.  

{{{
PoliteWebCrawler crawler = new PoliteWebCrawler(
        new CrawlConfiguration(),
	new YourCrawlDecisionMaker(),
	new YourThreadMgr(), 
	new YourScheduler(), 
	new YourHttpRequester(), 
	new YourHyperLinkParser(), 
	new YourMemoryManager(), 
        new YourDomainRateLimiter,
	new YourRobotsDotTextFinder());
}}}

Passing null for any implementation will use the default. The example below will use your custom implementation for the IPageRequester and IHyperLinkParser but will use the default for all others.

{{{
PoliteWebCrawler crawler = new PoliteWebCrawler(
	null, 
	null, 
        null,
        null,
	new YourPageRequester(), 
	new YourHyperLinkParser(), 
	null,
        null, 
	null);
}}}



